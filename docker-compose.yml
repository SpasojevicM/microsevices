version: "3.9"

services:
  config-server:
    build: ./config-server
    container_name: config-server
    environment:
      - spring.application.name=config-server
    volumes:
      - ./config-repo:/config-repo
    networks:
      - microservices
    depends_on:
      - eureka-server

  eureka-server:
    build: ./eureka-server
    container_name: eureka-server
    ports:
      - "8761:8761"
    networks:
      - microservices

  api-gateway:
    build: ./api-gateway
    container_name: api-gateway
    hostname: api.local
    ports:
      - "8080:8080"
    depends_on:
      - eureka-server
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - spring.cloud.gateway.discovery.locator.enabled=true
      - spring.cloud.discovery.enabled=true
      - spring.application.name=api-gateway
    networks:
      - microservices

  order-service:
    build: ./order-service
    container_name: order-service
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - spring.application.name=order-service
    depends_on:
      - eureka-server
      - api-gateway
      - kafka
    networks:
      - microservices

  notification-service:
    build: ./notification-service
    container_name: notification-service
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - spring.application.name=notification-service
    depends_on:
      - eureka-server
      - kafka
      - postgres
    networks:
      - microservices

  notification-service-2:
    build: ./notification-service
    container_name: notification-service-2
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - spring.application.name=notification-service
    depends_on:
      - eureka-server
      - kafka
      - postgres
    networks:
      - microservices

  notification-service-3:
    build: ./notification-service
    container_name: notification-service-3
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - spring.application.name=notification-service
    depends_on:
      - eureka-server
      - kafka
      - postgres
    networks:
      - microservices

  inventory-service:
    build: ./inventory-service
    container_name: inventory-service
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - spring.application.name=inventory-service
    depends_on:
      - eureka-server
    networks:
      - microservices

  inventory-service-2:
    build: ./inventory-service
    container_name: inventory-service-2
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - spring.application.name=inventory-service
    depends_on:
      - eureka-server
    networks:
      - microservices

  admin-service:
    build: ./admin
    container_name: admin-service
    ports:
      - "8085:8085"
    networks:
      - microservices

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_LISTENERS=INTERNAL://:9093,EXTERNAL://:9092
      - KAFKA_ADVERTISED_LISTENERS=INTERNAL://kafka:9093,EXTERNAL://localhost:9092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=INTERNAL
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper
    networks:
      - microservices

  kafka-create-topics:
    image: bitnami/kafka:latest
    container_name: kafka-create-topics
    depends_on:
      - kafka
    hostname: kafka-create-topics
    command: [ "bash", "./create_topic.sh" ]
    working_dir: /kafka
    volumes:
      - ./kafka:/kafka
    networks:
      - microservices

  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - microservices

  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: notificationdb
    networks:
      - microservices

networks:
  microservices:
    driver: bridge
